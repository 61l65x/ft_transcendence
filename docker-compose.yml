services:
  tr_front:
    build: srcs/frontend
    image: tr_front
    container_name: tr_front
    volumes:
        - ./srcs/frontend:/app
    environment:
      - NGINX_PORT=${NGINX_PORT}
    networks:
      - tr_network
    ports:
      - "8443:8443"

#   tr_back:
#     build: srcs/backend
#     image: tr_back
#     container_name: tr_back
#     volumes:
#         - ./srcs/backend:/app
#     environment:
#       - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
#       - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
#       - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
#       - DJANGO_PORT=${DJANGO_PORT}
#       - POSTGRES_HOST=${POSTGRES_HOST}
#       - POSTGRES_PORT=${POSTGRES_PORT}
#       - POSTGRES_DB=${POSTGRES_DB}
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#     networks:
#       - tr_network
#     ports:
#         - "${DJANGO_PORT}:${DJANGO_PORT}"
#     depends_on:
#       - tr_db
#   tr_db:
#     image: postgres:17.3-alpine3.21
#     container_name: tr_db
#     volumes:
#       - db_volume:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=${POSTGRES_DB}
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#     networks:
#       - tr_network
#     expose:
#       - ${POSTGRES_PORT}
#     restart: always

# volumes:
#   db_volume:

networks:
  tr_network:
    driver: bridge






# networks:
  
#   app-network:
#     driver: bridge
#     name: app-network
  
#   #monitoring-network:
#   #  driver: bridge
#   #  name: monitoring-network

#   backend-network:
#     driver: bridge
#     name: backend-network

# volumes:
#   grafana-storage:
#   postgres-data:

# services:

#   # Application services
#   nginx:
#     image: nginx:latest
#     container_name: nginx
#     ports:
#       - "4242:80" # http
#       #- "4243:443"  https
#     volumes:
#       - ./srcs/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
#     depends_on:
#       - backend
#       - frontend
#     networks:
#       - app-network

#   backend:
#     build: ./srcs/backend
#     container_name: backend
#     # ports:
#     #   - "8000:8000"
#     expose:
#       - "8000"
#     networks:
#       - app-network
#       - backend-network
#     environment:
#       - POSTGRES_DB=pong_db
#       - POSTGRES_USER=pong_user
#       - POSTGRES_PASSWORD=1234
#       - POSTGRES_HOST=postgres
#     depends_on:
#       - postgres
#     # volumes:
#     #   - ./srcs/backend/app:/app

#   postgres:
#     image: postgres:13
#     container_name: postgres
#     environment:
#       POSTGRES_DB: pong_db
#       POSTGRES_USER: pong_user
#       POSTGRES_PASSWORD: 1234
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#     networks:
#       - backend-network

#   frontend:
#     build: ./srcs/frontend
#     container_name: frontend
#     expose:
#       - "3000"
#     networks:
#       - app-network
#     volumes:
#       - ./srcs/frontend/app:/app




#   # Monitoring services
#   prometheus:
#     image: prom/prometheus:latest
#     container_name: prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./srcs/server-tools/prometheus.yml:/etc/prometheus/prometheus.yml
#     networks:
#       - app-network
#     #command:
#     #  - --config.file=/etc/prometheus/prometheus.yml
#     #  - --web.external-url=http://localhost/prometheus

#   grafana:
#     image: grafana/grafana:latest
#     container_name: grafana
#     ports:
#       - "3000:3000"
#     volumes:
#       - grafana-storage:/var/lib/grafana
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=1234
#     #  - GF_UPDATE_CHECK=false
#     #  - GF_SERVER_ROOT_URL=http://localhost/grafana
#     networks:
#       - app-network





